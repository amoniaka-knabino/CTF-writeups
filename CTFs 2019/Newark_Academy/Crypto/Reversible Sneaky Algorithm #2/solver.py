from numpy import gcd
from gmpy2 import invert
from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from Cryptodome.PublicKey import RSA
from Cryptodome.Cipher import PKCS1_OAEP

def extract_n_e(filename):
    key_file = open(filename, 'r')
    key = key_file.read()
    pubkey = RSA.importKey(key)
    return pubkey.n, pubkey.e

a= 84733215803103612460901465701232424798609470209825913961212238457798293111098195061837071495218083197429913141798442522950831495758395873695688189182925448736211066067276791533151828542439575601763801135131479532656528730453020404557236783254278625529895480234633323403399468237577058553920576024305830379725
r= 21700996784810065805847020455080940987640304282783092123992896363328128691169420271855815648912121417792054646557156071514079520782530801688062034321252682229729442734741486715339008457753023855600772948737800521010217600436912058582658334252483984244806083617513596479033871117464319239681526924092910597300
c= 85407181759755287105309527383534372436668736072315927293076398182206068631971587183149437554341349819060482477969350837066653250734556920049021810122548703168301872412719117857995283679569989680329696657609285728934732302846152702363240223251805773071022405764521081142920227557091217872210813095318042763847

n, e = extract_n_e("oligarchy.pem")

p = gcd(pow(a,r//2,n)+1, n)
q = n // p
d = invert(e, (p-1)*(q-1))

#Here you should create a privkey.pem file. 
#I used rsatool for it (look write_privkey_pem_file.txt)

c = 85407181759755287105309527383534372436668736072315927293076398182206068631971587183149437554341349819060482477969350837066653250734556920049021810122548703168301872412719117857995283679569989680329696657609285728934732302846152702363240223251805773071022405764521081142920227557091217872210813095318042763847
key = RSA.importKey(open('privkey.pem').read())
cipher = PKCS1_OAEP.new(key)
ciphertext = cipher.decrypt(long_to_bytes(c))
print ("c:", ciphertext)